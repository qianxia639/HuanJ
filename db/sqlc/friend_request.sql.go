// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: friend_request.sql

package db

import (
	"context"
)

const createFriendRequest = `-- name: CreateFriendRequest :exec
INSERT INTO friend_requests (
    sender_id, receiver_id, request_desc
) VALUES (
    $1, $2, $3
)
`

type CreateFriendRequestParams struct {
	SenderID    int32  `json:"sender_id"`
	ReceiverID  int32  `json:"receiver_id"`
	RequestDesc string `json:"request_desc"`
}

func (q *Queries) CreateFriendRequest(ctx context.Context, arg *CreateFriendRequestParams) error {
	_, err := q.db.Exec(ctx, createFriendRequest, arg.SenderID, arg.ReceiverID, arg.RequestDesc)
	return err
}

const getFriendRequest = `-- name: GetFriendRequest :one
SELECT id, sender_id, receiver_id, request_desc, status, requested_at, updated_at, expired_at FROM friend_requests 
WHERE 
	((sender_id = $1 AND receiver_id = $2) OR 
	(sender_id = $2 AND receiver_id = $1)) AND status = 1
`

type GetFriendRequestParams struct {
	SenderID   int32 `json:"sender_id"`
	ReceiverID int32 `json:"receiver_id"`
}

func (q *Queries) GetFriendRequest(ctx context.Context, arg *GetFriendRequestParams) (FriendRequest, error) {
	row := q.db.QueryRow(ctx, getFriendRequest, arg.SenderID, arg.ReceiverID)
	var i FriendRequest
	err := row.Scan(
		&i.ID,
		&i.SenderID,
		&i.ReceiverID,
		&i.RequestDesc,
		&i.Status,
		&i.RequestedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateExpiredFriendRequest = `-- name: UpdateExpiredFriendRequest :many
UPDATE friend_requests
SET
    status = $1,
    updated_at = NOW()
WHERE id IN (
    SELECT id
    FROM friend_requests
    WHERE status = 1 AND expired_at < NOW() 
    LIMIT $2
) RETURNING id
`

type UpdateExpiredFriendRequestParams struct {
	Status int8  `json:"status"`
	Limit  int32 `json:"limit"`
}

// 用于更新已过期的申请记录
func (q *Queries) UpdateExpiredFriendRequest(ctx context.Context, arg *UpdateExpiredFriendRequestParams) ([]int32, error) {
	rows, err := q.db.Query(ctx, updateExpiredFriendRequest, arg.Status, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFriendRequest = `-- name: UpdateFriendRequest :exec
UPDATE friend_requests
SET
	status  = $3,
	updated_at = now()
WHERE
sender_id = $1 AND receiver_id = $2 AND status = 1
`

type UpdateFriendRequestParams struct {
	SenderID   int32 `json:"sender_id"`
	ReceiverID int32 `json:"receiver_id"`
	Status     int8  `json:"status"`
}

func (q *Queries) UpdateFriendRequest(ctx context.Context, arg *UpdateFriendRequestParams) error {
	_, err := q.db.Exec(ctx, updateFriendRequest, arg.SenderID, arg.ReceiverID, arg.Status)
	return err
}
