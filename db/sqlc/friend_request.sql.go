// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: friend_request.sql

package db

import (
	"context"
)

const createFriendRequest = `-- name: CreateFriendRequest :exec
INSERT INTO friend_requests (
    from_user_id, to_user_id, request_desc
) VALUES (
    $1, $2, $3
)
`

type CreateFriendRequestParams struct {
	FromUserID  int32  `json:"from_user_id"`
	ToUserID    int32  `json:"to_user_id"`
	RequestDesc string `json:"request_desc"`
}

func (q *Queries) CreateFriendRequest(ctx context.Context, arg *CreateFriendRequestParams) error {
	_, err := q.db.Exec(ctx, createFriendRequest, arg.FromUserID, arg.ToUserID, arg.RequestDesc)
	return err
}

const getFriendRequest = `-- name: GetFriendRequest :one
SELECT id, from_user_id, to_user_id, request_desc, status, requested_at, updated_at FROM friend_requests 
WHERE 
	((from_user_id = $1 AND to_user_id = $2) OR 
	(from_user_id = $2 AND to_user_id = $1)) AND status = 1
`

type GetFriendRequestParams struct {
	FromUserID int32 `json:"from_user_id"`
	ToUserID   int32 `json:"to_user_id"`
}

func (q *Queries) GetFriendRequest(ctx context.Context, arg *GetFriendRequestParams) (FriendRequest, error) {
	row := q.db.QueryRow(ctx, getFriendRequest, arg.FromUserID, arg.ToUserID)
	var i FriendRequest
	err := row.Scan(
		&i.ID,
		&i.FromUserID,
		&i.ToUserID,
		&i.RequestDesc,
		&i.Status,
		&i.RequestedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFriendRequest = `-- name: UpdateFriendRequest :exec
UPDATE friend_requests
SET
	status  = $3,
	updated_at = now()
WHERE
from_user_id = $1 AND to_user_id = $2 AND status = 1
`

type UpdateFriendRequestParams struct {
	FromUserID int32 `json:"from_user_id"`
	ToUserID   int32 `json:"to_user_id"`
	Status     int8  `json:"status"`
}

func (q *Queries) UpdateFriendRequest(ctx context.Context, arg *UpdateFriendRequestParams) error {
	_, err := q.db.Exec(ctx, updateFriendRequest, arg.FromUserID, arg.ToUserID, arg.Status)
	return err
}
